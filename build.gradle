import org.spongepowered.gradle.plugin.config.PluginLoaders
import org.spongepowered.plugin.metadata.model.PluginDependency

buildscript {
  repositories {
    mavenCentral()
    maven {
      name = "forge"
      url = "https://files.minecraftforge.net/maven"
    }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
  }
}

plugins {
  id 'java'
  id 'java-library'
  id "maven-publish"
  id 'org.cadixdev.licenser' version '0.6.1'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id "org.spongepowered.gradle.plugin" version "2.0.1"
}

apply plugin: 'net.minecraftforge.gradle'

minecraft {
  // The mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   Snapshot are built nightly.
  // stable_#            Stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'official', version: '1.16.5'
}

group = "com.ichorpowered"
version = "0.1.0-SNAPSHOT"
description = "A minimal packet manipulation library for Sponge."

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

sponge {
  apiVersion("8.0.0")
  license("MIT")
  loader {
    name(PluginLoaders.JAVA_PLAIN)
    version("1.0")
  }
  plugin("protocolcontrol") {
    displayName("Protocol Control")
    entrypoint("com.ichorpowered.protocolcontrol.ProtocolPlugin")
    description("${project.description}")
    links {
      source("https://github.com/vectrix-space/protocolcontrol")
      issues("https://github.com/vectrix-space/protocolcontrol/issues")
    }
    contributor("Vectrix") {
      description("Project Owner/Developer")
    }
    dependency("spongeapi") {
      loadOrder(PluginDependency.LoadOrder.AFTER)
      optional(false)
    }
  }
}

repositories {
  mavenCentral()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
//  maven {
//    url "https://repo.ichorpowered.com/repository/maven-public"
//  }
  maven {
    name 'Sponge Releases'
    url 'https://repo.spongepowered.org/repository/maven-releases'
  }
  maven {
    name 'Sponge Snapshots'
    url 'https://repo.spongepowered.org/repository/maven-snapshots'
  }
}

license {
  header = file("header.txt")
  newLine = false
  ext {
    name = "ProtocolControl"
    organization = "IchorPowered"
    url = "http://ichorpowered.com"
  }

  include("**/*.java", "**/*.groovy", "**/*.kt")
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'

  implementation "net.kyori:indigo:1.0.0-SNAPSHOT"
  implementation "net.kyori:mu:1.0.0-SNAPSHOT"
  implementation "net.kyori:violet:1.2.0-SNAPSHOT"
  implementation "net.kyori:event-method-asm:4.0.0-SNAPSHOT"
  implementation 'com.google.inject:guice:4.1.0'
  compileOnly group: 'org.spongepowered', name: 'math', version: '2.0.1'
  //compileOnly "org.spongepowered:sponge:1.16.5-8.0.0-SNAPSHOT:dev"
}

tasks.withType(JavaCompile) {
  options.compilerArgs += ["-Xlint:all", "-Xlint:-path", "-parameters"]
  options.deprecation = true
  options.encoding = "UTF-8"
}

jar {
  manifest.attributes(
    "Specification-Title": "ProtocolControl",
    "Specification-Vendor": "IchorPowered",
    "Specification-Version": 1,
    "Implementation-Title": project.name,
    "Implementation-Version": project.version,
    "FMLAT": "protocolcontrol_at.cfg",
    "ForceLoadAsMod": true
  )
}

javadoc {
  options.encoding = "UTF-8"
  options.charSet = "UTF-8"
  options.links(
    "http://www.slf4j.org/apidocs/",
    "https://google.github.io/guava/releases/21.0/api/docs/",
    "https://google.github.io/guice/api-docs/4.1/javadoc/",
    "http://asm.ow2.org/asm50/javadoc/user/"
  )

  // Disable the crazy super-strict doclint tool in Java 8
  options.addStringOption("Xdoclint:none", "-quiet")
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

task javadocsJar(type: Jar) {
  from javadoc
  classifier = "javadoc"
}

shadowJar {
  classifier = "shaded"

  dependencies {
    include(dependency("net.kyori:indigo"))

    include(dependency("net.kyori:mu"))
    include(dependency("net.kyori:violet"))
    include(dependency("net.kyori:event-api"))
    include(dependency("net.kyori:event-method"))
    include(dependency("net.kyori:event-method-asm"))
    //include(dependency("net.kyori:examination-api"))

    include(dependency("com.google.inject:guice"))
    include(dependency("com.google.inject.extensions:guice-assistedinject"))
    include(dependency("com.google.inject.extensions:guice-multibindings"))
  }

  relocate('com.google.guice', 'com.ichorpowered.protocolcontrol.lib.guice')
  relocate("net.kyori.mu", "com.ichorpowered.protocolcontrol.lib.kyori.mu")
  relocate("net.kyori.violet", "com.ichorpowered.protocolcontrol.lib.kyori.violet")
  relocate("net.kyori.event-api", "com.ichorpowered.protocolcontrol.lib.kyori.event-api")
  relocate("net.kyori.event-method", "com.ichorpowered.protocolcontrol.lib.kyori.event-method")
  relocate("net.kyori.event-method-asm", "com.ichorpowered.protocolcontrol.lib.kyori.event-method-asm")
  exclude "dummyThing"
}

reobf {
  shadowJar {}
}

def ichorpoweredUsername = System.getenv("ICHORPOWERED_USERNAME")
def ichorpoweredPassword = System.getenv("ICHORPOWERED_PASSWORD")

tasks.<PublishToMavenRepository>withType(PublishToMavenRepository.class).configureEach {
  onlyIf {
    (repository == publishing.repositories["GitHubPackages"]
      || (ichorpoweredUsername != null && ichorpoweredPassword != null))
  }
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/ichorpowered/protocolcontrol"
      credentials {
        username = project.findProperty("gpr.user") as String ?: System.getenv("GITHUB_USERNAME")
        password = project.findProperty("gpr.key") as String ?: System.getenv("GITHUB_TOKEN")
      }
    }
    maven {
      name = "IchorpoweredRepo"
      url = "https://repo.ichorpowered.com/repository/maven-ichorpowered"

      credentials {
        username = ichorpoweredUsername
        password = ichorpoweredPassword
      }
    }
  }
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact shadowJar
      artifact sourcesJar
      artifact javadocsJar

      pom {
        name = project.name
        url = "https://github.com/ichorpowered/protocolcontrol"
        description = project.description

        licenses {
          license {
            name = "MIT"
            url = "https://opensource.org/licenses/MIT"
          }
        }

        scm {
          connection = "scm:git:git://github.com/ichorpowered/protocolcontrol.git"
          developerConnection = "scm:git:ssh://github.com/ichorpowered/protocolcontrol.git"
          url = "https://github.com/ichorpowered/protocolcontrol/"
        }
      }
    }
  }
}

checkLicenseMain.dependsOn(updateLicenses)
build.dependsOn reobfShadowJar
